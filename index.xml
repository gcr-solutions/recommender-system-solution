<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recommender System Solution workshop on Recommender System Solution</title><link>https://gcr-solutions.github.io/recommender-system-solution/</link><description>Recent content in Recommender System Solution workshop on Recommender System Solution</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://gcr-solutions.github.io/recommender-system-solution/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS Cloud9</title><link>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/workspace/cloud9/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/workspace/cloud9/readme/</guid><description>AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal.
Create new Cloud9 IDE environment If you donâ€™t already have an AWS account with Administrator access: [create one now by clicking here]https://aws.amazon.com/getting-started/ Go to AWS Cloud9 Console Use the region drop list to select Asia Pacific (Tokyo)ap-northeast-1 Click Create environment button to create an cloud9 environment Name it rs-workshop, click Next Take all default values and click Create environment This will take about 1-2 minutes to provision</description></item><item><title>Create Infrastructure</title><link>https://gcr-solutions.github.io/recommender-system-solution/deploy/online/create-infra/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/deploy/online/create-infra/readme/</guid><description>In this step, you will create Recommender System Online part infrastructure
Go to /home/ec2-user/environment/recommender-system-solution/scripts directory cd /home/ec2-user/environment/recommender-system-solution/scripts Run the command below to create infrastructure, including: eks cluster istio efs elastic cache(redis) ./create-online-infra.sh This will take about ~20 minutes to provision
Verify the infrastructre already created successfully: Verify eks nodes created successfully, there should be two nodes and status should be Ready
kubectl get node Check EFS created successfully, the console output should like below:</description></item><item><title>Install eksctl</title><link>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/tools/eksctl/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/tools/eksctl/readme/</guid><description>eksctl is a command line tool for working with EKS clusters that automates many individual tasks. For this workshop you will use a eksctl. Once you install eksctl, you will be ready to get started.
At the terminal command prompt, enter the following two commands:
curl --silent --location &amp;quot;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz&amp;quot; | tar xz -C /tmp sudo mv /tmp/eksctl /usr/local/bin This will install eksctl in your Cloud9 environment. To test to make sure the command is installed properly, execute the command:</description></item><item><title>Prepare deploy scripts</title><link>https://gcr-solutions.github.io/recommender-system-solution/deploy/deploy-prepare/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/deploy/deploy-prepare/readme/</guid><description>In this section, you&amp;rsquo;ll need to prepare deploy script
Open the Cloud9 IDE created in prerequisite section and go to /home/ec2-user/environment directory cd /home/ec2-user/environment Download scripts from our public github repo git clone https://github.com/gcr-solutions/recommender-system-solution.git cd recommender-system-solution/</description></item><item><title>Create an IAM role for your workspace</title><link>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/workspace/create-role/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/workspace/create-role/readme/</guid><description>Starting from here, when you see command to be entered such as below, you will enter these commands into Cloud9 IDE. You can use the Copy to clipboard feature (right hand upper corner) to simply copy and paste into Cloud9. In order to paste, you can use Ctrl + V for Windows or Command + V for Mac.
Follow this deep link to create an IAM role with Administrator access.</description></item><item><title>Deploy The Offline Logic</title><link>https://gcr-solutions.github.io/recommender-system-solution/deploy/offline/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/deploy/offline/readme/</guid><description>In this step, you will find and deploy one serverless application that have been published to the AWS Serverless Application Repository. The application enables authentication with Amazon Cognito for your website.
The following diagram is a high-level architecture of this lab
There are two S3 bucket
Private S3 bucket: contains private content, users can not access the content before login by Cognito Public S3 bucket: contains the demo website resources, users can access it through CloudFront publicly Here is how it works</description></item><item><title>Install kubectl</title><link>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/tools/kubectl/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/tools/kubectl/readme/</guid><description>The Kubernetes command-line tool, kubectl, allows you to run commands against Kubernetes clusters. You can use kubectl to deploy applications, inspect and manage cluster resources, and view logs.
At the terminal command prompt, enter the following two commands:
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl This will install kubectl in your Cloud9 environment. To test to make sure the command is installed properly, execute the command:</description></item><item><title>Setup Argo cd Server</title><link>https://gcr-solutions.github.io/recommender-system-solution/deploy/online/argocd-server/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/deploy/online/argocd-server/readme/</guid><description>In this step, you will setup Argo CD server in EKS cluster
Go to /home/ec2-user/environment/recommender-system-solution/scripts directory cd /home/ec2-user/environment/recommender-system-solution/scripts Run the below command to setup argocd server in eks cluster ./setup-argocd-server.sh This will take about ~1 minutes to provision
the console will output user and password of argocd like below:
Get argocd server elb DNS name from LoadBalancer Console, select the argocd load balancer which Tags value is argocd/argocd-server, like below: Copy DNS name into browser to access argocd server portal, if you are the first time to access this endpoint, click Advanced and Proceed to &amp;hellip;</description></item><item><title>Attach the IAM role to your workspace</title><link>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/workspace/attach-role/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/workspace/attach-role/readme/</guid><description> Click the grey circle button (in top right corner) and select Manage EC2 Instance. EC2 dashboard will be opened, select the &amp;ldquo;aws-cloud9-rs-workshop-xxx&amp;rdquo; instance, then choose Actions / Security / Modify IAM Role Choose gcr-rs-workshop-admin from the IAM Role drop down, and select Save</description></item><item><title>Create Argo cd application</title><link>https://gcr-solutions.github.io/recommender-system-solution/deploy/online/create-argocd-app/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/deploy/online/create-argocd-app/readme/</guid><description>In this step, you will create Argo CD application to deploy all online services into EKS cluster
Go to /home/ec2-user/environment/recommender-system-solution/scripts directory cd /home/ec2-user/environment/recommender-system-solution/scripts Run below command to login argo cd server from console: Please replace with DNS Name, and input User name and Password. Refer Setup argocd server in eks cluster section to get DNS Name, User name and Password
argocd --insecure login &amp;lt;argo cd elb dns name&amp;gt;:443 example: argocd &amp;ndash;insecure login add52b9be011a48e8959838ae16e41f5-178187690.</description></item><item><title>Sync local config to argo cd application</title><link>https://gcr-solutions.github.io/recommender-system-solution/deploy/online/sync-local-config/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/deploy/online/sync-local-config/readme/</guid><description>In this step, you will update and sync local config to argo cd config
Go to /home/ec2-user/environment/recommender-system-solution/scripts directory cd /home/ec2-user/environment/recommender-system-solution/scripts Run below command to update and sync local config to argo cd config: ./update-services-config.sh Wait for about ï½ž3 minute, then we can go to argo cd portal to check application, all services should be deployed successfully.</description></item><item><title>Update IAM settings for your workspace</title><link>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/workspace/update-role-settings/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/workspace/update-role-settings/readme/</guid><description>Cloud9 normally manages IAM credentials dynamically. This isn&amp;rsquo;t currently compatible with the EKS IAM authentication, so we will disable it and rely on the IAM role instead.
Starting from here, when you see command to be entered such as below, you will enter these commands into Cloud9 IDE. You can use the Copy to clipboard feature (right hand upper corner) to simply copy and paste into Cloud9. In order to paste, you can use Ctrl + V for Windows or Command + V for Mac.</description></item><item><title>Create an SSH key</title><link>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/workspace/create-ssh-key/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/workspace/create-ssh-key/readme/</guid><description>Please run this command to generate SSH Key in Cloud9. This key will be used on the worker node instances to allow ssh access if necessary.
ssh-keygen Press enter 3 times to take the default choices
Upload the public key to your EC2 region:
aws ec2 import-key-pair --key-name &amp;#34;gcrrsworkshop&amp;#34; --public-key-material file://~/.</description></item><item><title>Install kubectl</title><link>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/tools/kustomize/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gcr-solutions.github.io/recommender-system-solution/prerequisite/tools/kustomize/readme/</guid><description>Install Kustomize Kustomize lets you customize raw, template-free YAML files for multiple purposes, leaving the original YAML untouched and usable as is.
Install kustomize for Linux:
curl --silent --location --remote-name \ &amp;#34;https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v3.2.3/kustomize_kustomize.v3.2.3_linux_amd64&amp;#34; &amp;amp;&amp;amp; \ chmod a+x kustomize_kustomize.v3.2.3_linux_amd64 &amp;amp;&amp;amp; \ sudo mv kustomize_kustomize.v3.2.3_linux_amd64 /usr/local/bin/kustomize Verify the install with:
kustomize version</description></item></channel></rss>