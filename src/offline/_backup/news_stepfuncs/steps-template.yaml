AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  (SO8010)

  CloudFormation for RecSys StepFuncs


Parameters:
  Bucket:
    Type: String

  S3Prefix:
    Type: String
    Default: rsdemo

  StepFuncAndLambdaRoleName:
    Type: String
    Default: rsdemo-LambdaAndStepFuncsRole

  SagemakerRoleName:
    Type: String
    Default: rsdemo-SMRole

  S3UtilLabmda:
    Type: String
    Default: rsdemo-S3UtilLabmda

  PreCheckLabmda:
    Type: String
    Default: rsdemo-PreCheckLabmda

  SNSMessageLambda:
    Type: String
    Default: rsdemo-SNSMessageLambda

Resources:
  SMProcessingStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-SMProcessingStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Run processing",
          "States": {
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sagemaker:createProcessingJob.sync",
              "Parameters": {
                "AppSpecification": {
                  "ImageUri.$": "States.Format('${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{}:latest', $.ImageName)",
                  "ContainerArguments.$": "$.ContainerArguments"
                },
                "ProcessingResources": {
                  "ClusterConfig": {
                    "InstanceCount": 1,
                    "InstanceType.$": "$.InstanceType",
                    "VolumeSizeInGB": 5
                  }
                },
                "RoleArn": "arn:aws:iam::${AWS::AccountId}:role/service-role/${SagemakerRoleName}",
                "ProcessingJobName.$": "States.Format('{}', $$.Execution.Name)"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "ThrottlingException",
                    "SageMaker.AmazonSageMakerException"
                  ],
                  "IntervalSeconds": 4,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultSelector": {
                "ProcessingJobName.$": "$.ProcessingJobName",
                "ProcessingJobStatus.$": "$.ProcessingJobStatus"
              },
              "ResultPath": "$.RunProcessing",
              "End": true
            }
          }
        }

  DKNTrainStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-DKNTrainStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket": "${Bucket}",
                  "prefix": "${S3Prefix}",
                  "file_list": [
                    "model/sort/content/kg/news/gw/dkn_entity_embedding.npy",
                    "model/sort/content/kg/news/gw/dkn_context_embedding.npy",
                    "model/sort/content/words/sgns-mixed-large/dkn_word_embedding.npy",
                    "model/sort/action/dkn/train.csv/",
                    "model/sort/action/dkn/test.csv/"
                  ]
                }
              },
              "Resource": "arn:aws:states:::lambda:invoke",
              "Type": "Task",
              "Next": "Prepare input files"
            },
            "Prepare input files": {
              "Parameters": {
                "FunctionName": "${S3UtilLabmda}",
                "Payload": {
                  "bucket": "${Bucket}",
                  "action": [
                    {
                      "type": "copy",
                      "from": "${S3Prefix}/model/sort/content/kg/news/gw/dkn_entity_embedding.npy",
                      "to": "${S3Prefix}/model/sort/action/dkn/train.csv/entity_embeddings_TransE_128.npy"
                    },
                    {
                      "type": "copy",
                      "from": "${S3Prefix}/model/sort/content/kg/news/gw/dkn_context_embedding.npy",
                      "to": "${S3Prefix}/model/sort/action/dkn/train.csv/context_embeddings_TransE_128.npy"
                    },
                    {
                      "type": "copy",
                      "from": "${S3Prefix}/model/sort/content/words/sgns-mixed-large/dkn_word_embedding.npy",
                      "to": "${S3Prefix}/model/sort/action/dkn/train.csv/word_embeddings_300.npy"
                    }
                  ]
                }
              },
              "Resource": "arn:aws:states:::lambda:invoke",
              "Type": "Task",
              "Next": "DKN training on sagemaker"
            },
            "DKN training on sagemaker": {
              "Resource": "arn:aws:states:::sagemaker:createTrainingJob.sync",
              "Parameters": {
                "AlgorithmSpecification": {
                  "TrainingImage": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/news-dkn-train:latest",
                  "TrainingInputMode": "File",
                  "MetricDefinitions": [
                    {
                      "Name": "auc",
                      "Regex": "auc = (.*?),"
                    }
                  ]
                },
                "OutputDataConfig": {
                  "S3OutputPath": "s3://${Bucket}/${S3Prefix}/model/sort/action/dkn/output/"
                },
                "StoppingCondition": {
                  "MaxRuntimeInSeconds": 86400
                },
                "ResourceConfig": {
                  "InstanceCount": 1,
                  "InstanceType": "ml.p2.xlarge",
                  "VolumeSizeInGB": 5
                },
                "RoleArn": "arn:aws:iam::${AWS::AccountId}:role/service-role/${SagemakerRoleName}",
                "InputDataConfig": [
                  {
                    "DataSource": {
                      "S3DataSource": {
                        "S3DataType": "S3Prefix",
                        "S3Uri": "s3://${Bucket}/${S3Prefix}/model/sort/action/dkn/train.csv",
                        "S3DataDistributionType": "FullyReplicated"
                      }
                    },
                    "ChannelName": "train"
                  },
                  {
                    "DataSource": {
                      "S3DataSource": {
                        "S3DataType": "S3Prefix",
                        "S3Uri": "s3://${Bucket}/${S3Prefix}/model/sort/action/dkn/test.csv",
                        "S3DataDistributionType": "FullyReplicated"
                      }
                    },
                    "ChannelName": "eval"
                  }
                ],
                "HyperParameters": {
                  "learning_rate": "0.0001",
                  "servable_model_dir": "/opt/ml/model",
                  "loss_weight": "1.0",
                  "use_context": "False",
                  "max_click_history": "3",
                  "num_epochs": "2",
                  "max_title_length": "16",
                  "entity_dim": "128",
                  "word_dim": "300",
                  "batch_size": "128",
                  "perform_shuffle": "1",
                  "checkpointPath": "/opt/ml/input/data"
                },
                "TrainingJobName.$": "States.Format('dkn-train-{}', $$.Execution.Name)"
              },
              "Type": "Task",
              "Next": "Save model as latest",
              "ResultSelector": {
                "ModelArtifacts.$": "$.ModelArtifacts",
                "TrainingJobName.$": "$.TrainingJobName"
              }
            },
            "Save model as latest": {
              "Parameters": {
                "FunctionName": "${S3UtilLabmda}",
                "Payload": {
                  "bucket": "${Bucket}",
                  "action": [
                    {
                      "type": "copy",
                      "from.$": "$.ModelArtifacts.S3ModelArtifacts",
                      "to": "${S3Prefix}/model/sort/action/dkn/output/latest/model.tar.gz"
                    }
                  ]
                }
              },
              "Resource": "arn:aws:states:::lambda:invoke",
              "Type": "Task",
              "End": true
            }
          }
        }

  TrainContentModelStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-TrainContentModelStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket": "${Bucket}",
                  "prefix": "${S3Prefix}",
                  "file_list": [
                    "model/sort/content/words/mapping/kg_dbpedia.txt",
                    "model/sort/content/words/mapping/entities_dbpedia.dict",
                    "model/sort/content/words/mapping/relations_dbpedia.dict",
                    "model/sort/content/words/mapping/entity_industry.txt",
                    "model/sort/content/words/mapping/vocab.json"
                  ]
                }
              },
              "Resource": "arn:aws:states:::lambda:invoke",
              "Type": "Task",
              "Next": "Content model training on sagemaker"
            },
            "Content model training on sagemaker": {
              "Resource": "arn:aws:states:::sagemaker:createTrainingJob.sync",
              "Parameters": {
                "AlgorithmSpecification": {
                  "TrainingImage": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/news-content-train:latest",
                  "TrainingInputMode": "File",
                  "MetricDefinitions": [
                    {
                      "Name": "average loss",
                      "Regex": "average loss: (.*)"
                    }
                  ]
                },
                "OutputDataConfig": {
                  "S3OutputPath": "s3://${Bucket}/${S3Prefix}/model/null"
                },
                "StoppingCondition": {
                  "MaxRuntimeInSeconds": 86400
                },
                "ResourceConfig": {
                  "InstanceCount": 1,
                  "InstanceType": "ml.p2.xlarge",
                  "VolumeSizeInGB": 5
                },
                "RoleArn": "arn:aws:iam::${AWS::AccountId}:role/service-role/${SagemakerRoleName}",
                "HyperParameters": {
                  "graph_bucket": "${Bucket}",
                  "kg_dbpedia_key": "${S3Prefix}/model/sort/content/words/mapping/kg_dbpedia.txt",
                  "kg_entity_key": "${S3Prefix}/model/sort/content/words/mapping/entities_dbpedia.dict",
                  "kg_relation_key": "${S3Prefix}/model/sort/content/words/mapping/relations_dbpedia.dict",
                  "kg_entity_industry_key": "${S3Prefix}/model/sort/content/words/mapping/entity_industry.txt",
                  "kg_vocab_key": "${S3Prefix}/model/sort/content/words/mapping/vocab.json",
                  "data_input_key": " ",
                  "train_output_key": "${S3Prefix}/model/sort/content/kg/news/gw/"
                },
                "TrainingJobName.$": "States.Format('content-train-{}', $$.Execution.Name)"
              },
              "Type": "Task",
              "End": true
            }
          }
        }

  GenItemMapStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-GenItemMapStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket": "${Bucket}",
                  "prefix": "${S3Prefix}",
                  "file_list": [
                    "system/item-data/raw-input/"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "news-gen-item-map",
                  "ContainerArguments.$": "States.Array('--s3_bucket', '${Bucket}', '--s3_key_prefix', '${S3Prefix}')",
                  "InstanceType": "ml.c5.xlarge"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-SMProcessingStepFunc",
                "Name.$": "States.Format('genitemmap{}', $$.Execution.Name)"
              },
              "End": true
            }
          }
        }

  BatchJobStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-BatchJobStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket": "${Bucket}",
                  "prefix": "${S3Prefix}",
                  "file_list": [
                    "system/item-data/raw-input/toutiao_cat_data.txt",
                    "system/item-data/emr-out/item_map.csv",
                    "model/sort/content/words/sgns-mixed-large/dkn_word_embedding.npy",
                    "model/sort/content/kg/dkn_entity_embedding.npy",
                    "model/sort/content/words/mapping/kg_dbpedia.txt",
                    "model/sort/content/words/mapping/entities_dbpedia.dict",
                    "model/sort/content/words/mapping/relations_dbpedia.dict",
                    "model/sort/content/words/mapping/entity_industry.txt",
                    "model/sort/content/words/mapping/vocab.json"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "news-batch-job",
                  "ContainerArguments.$": "States.Array('--s3_bucket', '${Bucket}', '--s3_key_prefix', '${S3Prefix}')",
                  "InstanceType": "ml.p2.xlarge"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-SMProcessingStepFunc",
                "Name.$": "States.Format('batchjob{}', $$.Execution.Name)"
              },
              "End": true
            }
          }
        }
  ActionDataCleanStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-ActionDataCleanStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket": "${Bucket}",
                  "prefix": "${S3Prefix}",
                  "file_list": [
                   "system/user-data/raw_action_data/",
                   "model/news_map.csv/news_map.csv",
                   "model/user_map.csv/user_map.csv",
                   "model/news_encoding.csv"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "news-action-data-clean",
                  "ContainerArguments.$": "States.Array('--s3_bucket', '${Bucket}', '--s3_key_prefix', '${S3Prefix}')",
                  "InstanceType": "ml.p2.xlarge"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-SMProcessingStepFunc",
                "Name.$": "States.Format('actclean{}', $$.Execution.Name)"
              },
              "End": true
            }
          }
        }
  DashboardStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-DashboardStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "system/ingest-data/item/",
                   "system/ingest-data/action/",
                   "system/ingest-data/user/",
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "news-action-data-clean",
                  "ContainerArguments.$": "States.Array('--s3_bucket', '$.Bucket', '--s3_key_prefix', '$.S3Prefix')",
                  "InstanceType": "ml.p2.xlarge"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-SMProcessingStepFunc",
                "Name.$": "States.Format('actclean{}', $$.Execution.Name)"
              },
              "End": true
            }
          }
        }
