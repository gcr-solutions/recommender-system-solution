AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  (SO8010)

  CloudFormation for RecSys StepFuncs


Parameters:
  Bucket:
    Type: String

  S3Prefix:
    Type: String
    Default: sample-data

  StepFuncAndLambdaRoleName:
    Type: String
    Default: rsdemo-LambdaAndStepFuncsRole

  SagemakerRoleName:
    Type: String
    Default: rsdemo-SMRole

  S3UtilLabmda:
    Type: String
    Default: rsdemo-S3UtilLabmda

  PreCheckLabmda:
    Type: String
    Default: rsdemo-PreCheckLabmda

  SNSMessageLambda:
    Type: String
    Default: rsdemo-SNSMessageLambda

Resources:
  SMProcessingStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-SMProcessingStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Run processing",
          "States": {
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sagemaker:createProcessingJob.sync",
              "Parameters": {
                "AppSpecification": {
                  "ImageUri.$": "States.Format('${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/{}:latest', $.ImageName)",
                  "ContainerArguments.$": "$.ContainerArguments"
                },
                "ProcessingResources": {
                  "ClusterConfig": {
                    "InstanceCount": 1,
                    "InstanceType.$": "$.InstanceType",
                    "VolumeSizeInGB": 5
                  }
                },
                "RoleArn": "arn:aws:iam::${AWS::AccountId}:role/service-role/${SagemakerRoleName}",
                "ProcessingJobName.$": "States.Format('{}', $$.Execution.Name)"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "ThrottlingException",
                    "SageMaker.AmazonSageMakerException"
                  ],
                  "IntervalSeconds": 4,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultSelector": {
                "ProcessingJobName.$": "$.ProcessingJobName",
                "ProcessingJobStatus.$": "$.ProcessingJobStatus"
              },
              "ResultPath": "$.RunProcessing",
              "End": true
            }
          }
        }

  ActionPreprocessingStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-ActionPreprocessingStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "system/ingest-data/action/",
                   "system/ingest-data/user/"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "news-action-preprocessing",
                  "ContainerArguments.$": "States.Array('--bucket', '$.Bucket', '--prefix', '$.S3Prefix')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-SMProcessingStepFunc",
                "Name.$": "States.Format('actionpre{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-add-item-user-batch
  AddItemUserBatchStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-AddItemUserBatchStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "system/user-data/user.csv",
                   "system/item-data/item.csv"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "news-add-item-user-batch",
                  "ContainerArguments.$": "States.Array('--bucket', '$.Bucket', '--prefix', '$.S3Prefix')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-SMProcessingStepFunc",
                "Name.$": "States.Format('additemu{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-inverted-list
  InvertedListStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-InvertedListStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "model/meta_files/kg_dbpedia.txt",
                   "model/meta_files/entities_dbpedia.dict",
                   "model/meta_files/relations_dbpedia.dict",
                   "model/meta_files/entity_industry.txt"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "news-inverted-list",
                  "ContainerArguments.$": "States.Array('--bucket', '$.Bucket', '--prefix', '$.S3Prefix')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-SMProcessingStepFunc",
                "Name.$": "States.Format('inverted{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-item-preprocessing
  ItemPreprocessingStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-ItemPreprocessingStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "system/ingest-data/item/"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "news-item-preprocessing",
                  "ContainerArguments.$": "States.Array('--bucket', '$.Bucket', '--prefix', '$.S3Prefix')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-SMProcessingStepFunc",
                "Name.$": "States.Format('itempre{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-portrait-batch
  PortraitBatchStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-PortraitBatchStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "system/action-data/action.csv",
                   "feature/recommend-list/portrait/portrait.pickle",
                   "feature/content/inverted-list/news_id_news_property_dict.pickle"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "news-portrait-batch",
                  "ContainerArguments.$": "States.Array('--bucket', '$.Bucket', '--prefix', '$.S3Prefix')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-SMProcessingStepFunc",
                "Name.$": "States.Format('portrait{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-recall-batch
  RecallBatchStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-RecallBatchStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "system/action-data/action.csv",
                   "feature/recommend-list/portrait/portrait.pickle",
                   "feature/content/inverted-list/news_id_news_property_dict.pickle",
                   "feature/content/inverted-list/news_type_news_ids_dict.pickle",
                   "feature/content/inverted-list/news_entities_news_ids_dict.pickle",
                   "feature/content/inverted-list/news_keywords_news_ids_dict.pickle",
                   "feature/content/inverted-list/news_words_news_ids_dict.pickle",
                   "feature/content/inverted-list/recall_config.pickle"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "news-recall-batch",
                  "ContainerArguments.$": "States.Array('--bucket', '$.Bucket', '--prefix', '$.S3Prefix')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-SMProcessingStepFunc",
                "Name.$": "States.Format('recall{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  # news-weight-update-batch
  WeightUpdateBatchStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-WeightUpdateBatchStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                   "model/meta_files/kg_dbpedia.txt",
                   "model/meta_files/entities_dbpedia.dict",
                   "model/meta_files/relations_dbpedia.dict",
                   "model/meta_files/entity_industry.txt"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "news-weight-update-batch",
                  "ContainerArguments.$": "States.Array('--bucket', '$.Bucket', '--prefix', '$.S3Prefix')",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-SMProcessingStepFunc",
                "Name.$": "States.Format('weightu{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }