AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  (SO8010)

  CloudFormation for RecSys StepFuncs


Parameters:
  StepFuncAndLambdaRoleName:
    Type: String
    Default: rsdemo-LambdaAndStepFuncsRole

  SagemakerRoleName:
    Type: String
    Default: rsdemo-SMRole

  S3UtilLabmda:
    Type: String
    Default: rsdemo-S3UtilLabmda

  PreCheckLabmda:
    Type: String
    Default: rsdemo-PreCheckLabmda

  SNSMessageLambda:
    Type: String
    Default: rsdemo-SNSMessageLambda

Resources:
  ItemNewStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFuncAndLambdaRoleName}"
      StateMachineName: rsdemo-News-ItemNewStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Process raw data",
          "TimeoutSeconds": 36000,
          "States": {
            "Process raw data": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "Bucket.$": "$.Bucket",
                  "S3Prefix.$": "$.S3Prefix"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-ItemPreprocessingStepFunc",
                "Name.$": "States.Format('{}', $$.Execution.Name)"
              },
              "Next": "Process data",
              "ResultPath": "$.ItemPreprocessing"
            },
            "Process data": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Wait 1 seconds",
                  "States": {
                    "Wait 1 seconds": {
                      "Type": "Wait",
                      "Seconds": 1,
                      "Next": "Inverted list"
                    },
                    "Inverted list": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::states:startExecution.sync:2",
                      "Parameters": {
                        "Input": {
                          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                          "Bucket.$": "$.Bucket",
                          "S3Prefix.$": "$.S3Prefix"
                        },
                        "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-InvertedListStepFunc",
                        "Name.$": "States.Format('{}', $$.Execution.Name)"
                      },
                      "ResultPath": "$.InvertedList",
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Wait 10 seconds",
                  "States": {
                    "Wait 10 seconds": {
                      "Type": "Wait",
                      "Seconds": 10,
                      "Next": "Add item user batch"
                    },
                    "Add item user batch": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::states:startExecution.sync:2",
                      "Parameters": {
                        "Input": {
                          "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                          "Bucket.$": "$.Bucket",
                          "S3Prefix.$": "$.S3Prefix"
                        },
                        "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-AddItemUserBatchStepFunc",
                        "Name.$": "States.Format('{}', $$.Execution.Name)"
                      },
                      "ResultPath": "$.AddItemUserBatch",
                      "End": true
                    }
                  }
                }
              ],
              "ResultPath": null,
              "Next": "Model update graph"
            },
            "Model update graph": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "Bucket.$": "$.Bucket",
                  "S3Prefix.$": "$.S3Prefix"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-ModelUpdateGraphStepFunc",
                "Name.$": "States.Format('{}', $$.Execution.Name)"
              },
              "ResultPath": "$.ModelUpdateUb",
              "Next": "Item feature update batch"
            },
            "Item feature update batch": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "Bucket.$": "$.Bucket",
                  "S3Prefix.$": "$.S3Prefix"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-ItemFeatureUpdateBatchStepFunc",
                "Name.$": "States.Format('{}', $$.Execution.Name)"
              },
              "Next": "Model update graph Todo",
              "ResultPath": "$.ItemFeatureUpdateBatch"
            },
            "Model update graph Todo": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "Bucket.$": "$.Bucket",
                  "S3Prefix.$": "$.S3Prefix"
                },
                "StateMachineArn": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rsdemo-News-ModelUpdateGraphStepFunc",
                "Name.$": "States.Format('{}', $$.Execution.Name)"
              },
              "Next": "Send notification",
              "ResultPath": "$.ModelUpdateDeepfm"
            },
            "Send notification": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${SNSMessageLambda}",
                "Payload": {
                  "file_type": "action-new",
                  "message_type": "news",
                  "Bucket.$": "$.Bucket",
                  "S3Prefix.$": "$.S3Prefix"
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "Next": "Succeed",
              "ResultPath": "$.Notification"
            },
            "Succeed": {
              "Type": "Succeed"
            }
          }
        }
