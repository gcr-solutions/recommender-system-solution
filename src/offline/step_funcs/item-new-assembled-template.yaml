AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  (SO8010)

  CloudFormation for RecSys StepFuncs


Parameters:
  NamePrefix:
    Type: String
    Default: rsdemo

  StepFuncAndLambdaRoleName:
    Type: String
    Default: LambdaAndStepFuncsRole

  SagemakerRoleName:
    Type: String
    Default: SMRole

  S3UtilLabmda:
    Type: String
    Default: S3UtilLabmda

  PreCheckLabmda:
    Type: String
    Default: PreCheckLabmda

  SNSMessageLambda:
    Type: String
    Default: SNSMessageLambda

  ECRPrefix:
    Type: String
    Default: 522244679887.dkr.ecr.ap-northeast-1.amazonaws.com

  ImageTag:
    Type: String
    Default: latest


Resources:
  AssDataPreprocessingStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${NamePrefix}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-News-AssDataPreprocessingStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${NamePrefix}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                    "system/ingest-data/action/",
                    "system/ingest-data/item/"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Run processing"
            },
            "Run processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "ImageName": "rs/news-assembled-data-preprocessing",
                  "ContainerArguments.$": "States.Array('--bucket', $.Bucket, '--prefix', $.S3Prefix)",
                  "InstanceType": "ml.m5.xlarge"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-News-SMProcessingStepFunc",
                "Name.$": "States.Format('Nassdatap{}', $.Precheck.Payload.UID)"
              },
              "End": true
            }
          }
        }

  AssTrainModelStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${NamePrefix}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-News-AssTrainModelStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Pre check",
          "States": {
            "Pre check": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${NamePrefix}-${PreCheckLabmda}",
                "Payload": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix",
                  "file_list": [
                    "system/ingest-data/action/",
                    "system/ingest-data/item/"
                  ]
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.Precheck",
              "Next": "Train model"
            },
            "Train model": {
              "Resource": "arn:${AWS::Partition}:states:::sagemaker:createTrainingJob.sync",
              "Parameters": {
                "AlgorithmSpecification": {
                  "TrainingImage": "${ECRPrefix}/rs/news-assembled-train-model-gpu:${ImageTag}",
                  "TrainingInputMode": "File",
                  "MetricDefinitions": [
                    {
                      "Name": "average loss",
                      "Regex": "average loss: (.*)"
                    }
                  ]
                },
                "OutputDataConfig": {
                  "S3OutputPath.$": "States.Format('s3://{}/{}/model/rank/content/dkn_train_output/', $.Bucket,  $.S3Prefix)"
                },
                "StoppingCondition": {
                  "MaxRuntimeInSeconds": 86400
                },
                "ResourceConfig": {
                  "InstanceCount": 1,
                  "InstanceType": "ml.p2.xlarge",
                  "VolumeSizeInGB": 5
                },
                "RoleArn": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/${NamePrefix}-${SagemakerRoleName}-${AWS::Region}",
                "HyperParameters": {
                  "bucket.$": "$.Bucket",
                  "prefix.$": "$.S3Prefix"
                },
                "TrainingJobName.$": "States.Format('Ntrainemodel-{}', $.Precheck.Payload.UID)"
              },
              "Type": "Task",
              "End": true
            }
          }
        }

  AssItemNewStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${NamePrefix}-${StepFuncAndLambdaRoleName}-${AWS::Region}"
      StateMachineName: !Sub ${NamePrefix}-News-AssItemNewStepFunc
      DefinitionString: !Sub |
        {
          "StartAt": "Data processing",
          "TimeoutSeconds": 36000,
          "States": {
            "Data processing": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "Bucket.$": "$.Bucket",
                  "S3Prefix.$": "$.S3Prefix"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-News-AssDataPreprocessingStepFunc",
                "Name.$": "States.Format('{}', $$.Execution.Name)"
              },
              "Next": "Inverted list",
              "ResultPath": "$.AssDataPreprocessing"
            },
            "Inverted list": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "Bucket.$": "$.Bucket",
                  "S3Prefix.$": "$.S3Prefix"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:rs-${Stage}-News-InvertedListStepFunc",
                "Name.$": "States.Format('{}', $$.Execution.Name)"
              },
              "ResultPath": "$.InvertedList",
              "Next": "Train model (embedding)"
            },
            "Train model (embedding)": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::states:startExecution.sync:2",
              "Parameters": {
                "Input": {
                  "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id",
                  "Bucket.$": "$.Bucket",
                  "S3Prefix.$": "$.S3Prefix"
                },
                "StateMachineArn": "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-News-AssTrainModelStepFunc",
                "Name.$": "States.Format('{}', $$.Execution.Name)"
              },
              "ResultPath": "$.AssTrainModel",
              "Next": "Send notification"
            },
            "Send notification": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${NamePrefix}-${SNSMessageLambda}",
                "Payload": {
                  "file_type": "item-new",
                  "message_type": "news",
                  "Bucket.$": "$.Bucket",
                  "S3Prefix.$": "$.S3Prefix"
                }
              },
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "Next": "Succeed",
              "ResultPath": "$.Notification"
            },
            "Succeed": {
              "Type": "Succeed"
            }
          }
        }

